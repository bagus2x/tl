@startuml
skinparam dpi 720
skinparam classAttributeIconSize 0
left to right direction
'skinparam nodesep 100

package domain {
    package models {
       class Message {
            +id: Long
            +senderId: Long
            +receiverId: Long
            +description: String
            +file: String?
            +updatedAt: Date
            +createdAt: Date
        }
        class Notification {
            +id: Long
            +userId: Long
            +dataId: Long?
            +title: String
            +subtitle1: String?
            +subtitle2: String?
            +photo: String?
            +description: String?
            +createdAt: Date
        }
        class Testimony {
            +id: Long
            +senderId: Long
            +receiverId: Long
            +description: String
            +updatedAt: Date
            +createdAt: Date
        }
        class User {
            +id: Long
            +name: String
            +email: String
            +photo: String?
            +university: String?
            +department: String?
            +stream: String?
            +year: Int?
            +gender: String?
            +age: Int?
            +bio: String?
            +achievements: List<String>
            +certifications: List<String>
            +invitable: Boolean
            +status: String?
            +createdAt: Date
        }
    }
    package repository {
        interface MessageRepository {
            +send()
            +getMessages(): Flow<List<Message>>
            +getLastMessages(): Flow<List<Message>>
        }
        MessageRepository ..> Message

        interface NotificationRepository {
            +getNotifications(): Flow<List<Notification>>
            +countUnread(): Flow<Int>
        }
        NotificationRepository ..> Notification

        interface TestimonyRepository {
            +save()
            +getTestimonies(): Flow<List<Testimony>>
        }
        TestimonyRepository ..> Testimony

        interface UserRepository {
            +getUser(): Flow<User?>
            +getUsers(): Flow<List<User>>
            +getFriends(): List<User>
            +update()
            +requestFriendship()
            +acceptFriendship()
            +cancelFriendship()
            +favorite()
            +unfavorite()
            +getFavorites(): List<User>
        }
        UserRepository ..> User
    }
    package usecase {
'        Message
        class SendMessageUseCase {
            +messageRepository: MessageRepository
            +invoke()
        }
        class GetMessagesUseCase {
            +messageRepository: MessageRepository
            +invoke()
        }
        class GetLastMessagesUseCase {
            +messageRepository: MessageRepository
            +userRepository: UserRepository
            +invoke()
        }
        SendMessageUseCase o--> MessageRepository
        GetMessagesUseCase o--> MessageRepository
        GetLastMessagesUseCase o--> MessageRepository
        GetLastMessagesUseCase o--> UserRepository

'        Notification
        class GetNotificationUseCase {
            +notificationRepository: NotificationRepository
            +unread: Flow<Int>
            +invoke(): Flow<List<Notification>>
        }
        GetNotificationUseCase o--> NotificationRepository

'        Testimony
        class AddTestimonyUseCase {
            +testimonyRepository: TestimonyRepository
            +invoke()
        }
        class GetTestimoniesUseCase {
            +testimonyRepository: TestimonyRepository
            +invoke()
        }
        AddTestimonyUseCase o--> TestimonyRepository
        GetTestimoniesUseCase o--> TestimonyRepository

'        User
        class EditProfileUseCase {
            +userRepository: UserRepository
            +invoke()
        }
        class FriendUseCase {
            +userRepository: UserRepository
            +invoke()
        }
        class GetUserUseCase {
            +userRepository: UserRepository
            +invoke(): Flow<User?>
        }
        class GetUsersUseCase {
            +userRepository: UserRepository
            +invoke(): FLow<List<User>>
        }
        class GetFriendsUseCase {
            +userRepository: UserRepository
            +invoke(): FLow<List<User>>
        }
        class GetFavUsersUseCase {
            +userRepository: UserRepository
            +invoke(): FLow<List<User>>
        }
        EditProfileUseCase o--> UserRepository
        FriendUseCase o--> UserRepository
        GetUserUseCase o--> UserRepository
        GetUsersUseCase o--> UserRepository
        GetFriendsUseCase o--> UserRepository
        GetFavUsersUseCase o--> UserRepository
    }
}
@enduml
